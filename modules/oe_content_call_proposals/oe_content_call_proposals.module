<?php

/**
 * @file
 * Primary module hooks for OpenEuropa Call For Proposals content module.
 */

declare(strict_types=1);

use Drupal\Core\Datetime\Element\Datetime;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\oe_content_call_proposals\CallForProposalsNodeWrapper;
use Drupal\oe_content_call_proposals\CallForProposalsNodeWrapperInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function oe_content_call_proposals_form_node_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getBuildInfo()['callback_object']->getEntity();
  if ($node->bundle() !== 'oe_call_proposals') {
    return;
  }

  $form['oe_call_proposals_deadline']['#states'] = [
    'invisible' => [
      'input[name="oe_call_proposals_model"]' => [
        'value' => CallForProposalsNodeWrapperInterface::MODEL_PERMANENT,
      ],
    ],
  ];

  $form['oe_call_proposals_deadline']['widget'][0]['value']['#element_validate'] = [
    'oe_content_call_proposals_deadline_validate',
    [Datetime::class, 'validateDatetime'],
  ];
}

/**
 * Validation callback for an "oe_call_proposals_deadline" datetime element.
 *
 * If the chosen CFP model is permanent, it means there is no deadline needed.
 * But in case the user first had set a deadline (or part of the deadline), we
 * need to clear the deadline value. The reason this happens in the validate
 * is so that the Datelist::validateDatelist() doesn't fail the submission in
 * case of an invalid deadline value.
 *
 * If a CFP is saved programmatically with a deadline and a permanent model, the
 * deadline value gets removed in oe_content_call_proposals_node_presave().
 *
 * @param array $element
 *   The element being processed.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 * @param array $complete_form
 *   The complete form structure.
 */
function oe_content_call_proposals_deadline_validate(array &$element, FormStateInterface $form_state, array &$complete_form) {
  $model = $form_state->getValue(['oe_call_proposals_model', 0, 'value']);
  if (!$model || $model !== 'permanent') {
    return;
  }

  $form_state->setValue(['oe_call_proposals_deadline', 0, 'value'], [
    'date' => '',
    'time' => '',
    'object' => NULL,
  ]);
}

/**
 * Implements hook_entity_type_alter().
 */
function oe_content_call_proposals_entity_type_alter(array &$entity_types) {
  $entity_types['node']->addConstraint('CallProposalsDeadlineDate');
}

/**
 * Returns the Model's allowed values.
 *
 * @return array
 *   The model values.
 */
function _oe_content_call_proposals_model_allowed_values(): array {
  return CallForProposalsNodeWrapper::getModelsList();
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function oe_content_call_proposals_node_presave(EntityInterface $entity) {
  if ($entity->bundle() !== 'oe_call_proposals') {
    return;
  }

  $wrapper = CallForProposalsNodeWrapper::getInstance($entity);

  if ($wrapper->isDeadlineModelPermanent()) {
    $entity->set('oe_call_proposals_deadline', NULL);
  }
}
