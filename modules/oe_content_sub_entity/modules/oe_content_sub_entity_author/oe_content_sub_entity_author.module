<?php

/**
 * @file
 * The OpenEuropa Content Sub Entity Author.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;

/**
 * Implements hook_ENTITY_TYPE_prepare_form().
 */
function oe_content_sub_entity_author_node_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $entity */
  if ($entity->isNew() === FALSE) {
    return;
  }

  if ($entity->hasField('oe_authors') === FALSE) {
    return;
  }

  // If we cannot reference the Corporate body entity bundle, do nothing.
  $field_settings = $entity->getFieldDefinition('oe_authors')->getSettings();
  if ($field_settings['target_type'] === 'oe_author' && !empty($field_settings['handler_settings']) && !in_array('oe_corporate_body', $field_settings['handler_settings']['target_bundles'])) {
    return;
  }

  if (\Drupal::service('module_handler')->moduleExists('oe_corporate_site_info') === FALSE) {
    return;
  }

  /** @var \Drupal\oe_corporate_site_info\SiteInformationInterface $site_information */
  $site_information = \Drupal::service('oe_corporate_site_info.site_information');
  if (!$site_information->hasDefaultContentOwners()) {
    // No content owner(s) defined.
    return;
  }

  $content_owners = $site_information->getDefaultContentOwners();
  // Set default corporate body entity for authors field.
  $corporate_body = \Drupal::entityTypeManager()->getStorage('oe_author')->create([
    'type' => 'oe_corporate_body',
    'oe_skos_reference' => array_values($content_owners),
  ]);
  $entity->set('oe_authors', [$corporate_body]);
}

/**
 * Implements hook_entity_delete().
 *
 * Delete author sub entities referencing a node being deleted.
 */
function oe_content_sub_entity_author_entity_delete(EntityInterface $entity) {
  if (!$entity instanceof NodeInterface) {
    return;
  }

  if ($entity->bundle() !== 'oe_organisation' && $entity->bundle() !== 'oe_person') {
    return;
  }

  $author_storage = \Drupal::entityTypeManager()->getStorage('oe_author');
  $authors = $author_storage->loadByProperties([
    'type' => $entity->bundle(),
    'oe_node_reference' => $entity->id(),
  ]);
  if (empty($authors)) {
    return;
  }
  $author_storage->delete($authors);
}
